#Import Desired Libraries Here
import os
import sys

os.environ["MAYA_LOCATION"] = "C:\Program Files\Autodesk\Maya2014"
os.environ["PYTHONHOME"] = "C:\Program Files\Autodesk\Maya2014\Python"
os.environ["PATH"] = "C:\\Program Files\\Autodesk\\Maya2014\\bin;" + os.environ["PATH"]

sys.path.append("C:\Program Files\Autodesk\Maya2014\Python\lib\site-packages\setuptools-0.6c9-py2.6.egg")
sys.path.append("C:\Program Files\Autodesk\Maya2014\Python\lib\site-packages\pymel-1.0.0-py2.6.egg")
sys.path.append("C:\Program Files\Autodesk\Maya2014\Python\lib\site-packages\ipython-0.10.1-py2.6.egg")
sys.path.append("C:\Program Files\Autodesk\Maya2014\Python\lib\site-packages\ply-3.3-py2.6.egg") 
sys.path.append("C:\Program Files\Autodesk\Maya2014\\bin\python26.zip")
sys.path.append("C:\Program Files\Autodesk\Maya2014\Python\DLLs")
sys.path.append("C:\Program Files\Autodesk\Maya2014\Python\lib")
sys.path.append("C:\Program Files\Autodesk\Maya2014\Python\lib\plat-win")
sys.path.append("C:\Program Files\Autodesk\Maya2014\Python\lib\lib-tk")
sys.path.append("C:\Program Files\Autodesk\Maya2014\\bin")
sys.path.append("C:\Program Files\Autodesk\Maya2014\Python")
sys.path.append("C:\Program Files\Autodesk\Maya2014\Python\lib\site-packages")


import maya.OpenMaya as om
import maya.OpenMayaMPx as omMPx
import random

#Set name and id
nodeName ='jitter'
nodeId =om.MTypeId(0x101112)

class jitterNode(omMPx.MPxNode):
    INPUT=om.MObject()
    OUTPUT=om.MObject()

    def __init__(self):
        omMPx.MPxNode.__inte__(self)

    def compute(self,plug,dataBlock):
        if (plug == jitterNode.OUTPUT):
            dataHandle = dataBlock.inputValue(jitterNode.INPUT)
            inFloat = dataHandle.asFloat()
            result = random.uniform(-1,1)+inFloat
            outputHandle = dataBlock.outputValue(jitterNode.OUTPUT)
            outputHandle.setFloat(result)
            dataBlock.setClean(plug)

def nodeCreator():
    # Create Jitter Node
    return omMPx.asMPxPtr( jitterNode() )

def nodeInit():
    #Init
    numAttr = om.MFnNumericAttribute()
    jitterNode.INPUT = numAttr.create("input","in",om.MFnNumericData.kFloat,0.0)
    numAttr.setStorable(1)

    numAttr = om.MFnNumericAttribute()
    jitterNode.OUTPUT = numAttr.create("output","out",om.MFnNumericData.kFloat,0.0)
    numAttr.setStorable(1)
    numAttr.setWritable(1)

    jitterNode.addAttribute(jitterNode.INPUT)
    jitterNode.addAttribute(jitterNode.OUTPUT)
    jitterNode.attributeAffects(jitterNode.INPUT,jitterNode.OUTPUT)

# This is used for loading plugins
def initializePlugin(mobject):
    mplugin = omMPx.MFnPlugin(mobject)
    try:
         mplugin.registerNode(nodeName, nodeId, nodeCreator, nodeInit)
    except:
        sys.stderr.write("Error loading")
        raise

# This is used for removing plugins
def uninitializePlugin(mobject):
    mplugin = omMPx.MFnPlugin(mobject)
    try:
        mplugin.deregisterNode( nodeId )
    except:
        sys.stderr.write("Error removing")
        raise
